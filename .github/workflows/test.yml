name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run unit tests
        run: ./gradlew testDebugUnitTest --stacktrace

      - name: Generate test coverage report
        run: ./gradlew jacocoTestReport

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            app/build/test-results/testDebugUnitTest/
            app/build/reports/tests/testDebugUnitTest/

      - name: Upload coverage reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: app/build/reports/jacoco/

      - name: Upload coverage to Codecov
        if: always()
        uses: codecov/codecov-action@v4
        with:
          files: app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Publish test report
        if: always()
        uses: mikepenz/action-junit-report@v4
        with:
          report_paths: 'app/build/test-results/testDebugUnitTest/TEST-*.xml'
          check_name: Unit Test Results
          detailed_summary: true
          include_passed: true

  instrumentation-tests:
    name: Instrumentation Tests (API ${{ matrix.api-level }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        api-level: [28, 31, 34]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Enable KVM group perms
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: AVD cache
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}

      - name: Create AVD and generate snapshot for caching
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: echo "Generated AVD snapshot for caching."

      - name: Run instrumentation tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./gradlew connectedDebugAndroidTest --stacktrace

      - name: Upload instrumentation test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: instrumentation-test-results-api-${{ matrix.api-level }}
          path: |
            app/build/reports/androidTests/connected/
            app/build/outputs/androidTest-results/connected/

  font-tests:
    name: Font System Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Verify font files exist
        run: |
          echo "Checking Kannada font files..."
          if [ ! -d "app/src/main/assets/ime/fonts/kannada" ]; then
            echo "❌ Kannada fonts directory missing"
            exit 1
          fi

          FONTS=(
            "NotoSansKannada-Regular.ttf"
            "NotoSansKannada-Bold.ttf"
            "NotoSansKannada-Light.ttf"
            "NotoSansKannada-Medium.ttf"
          )

          for font in "${FONTS[@]}"; do
            if [ -f "app/src/main/assets/ime/fonts/kannada/$font" ]; then
              SIZE=$(du -h "app/src/main/assets/ime/fonts/kannada/$font" | cut -f1)
              echo "✅ $font ($SIZE)"
            else
              echo "❌ $font missing"
              exit 1
            fi
          done

      - name: Validate theme JSON
        run: |
          echo "Validating kannada_custom.json..."
          python3 -m json.tool app/src/main/assets/ime/theme/org.florisboard.themes/stylesheets/kannada_custom.json > /dev/null
          echo "✅ Theme JSON is valid"

      - name: Run Snygg font tests
        run: ./gradlew test --tests "*SnyggFontValue*" --stacktrace

      - name: Check theme registration
        run: |
          echo "Checking theme registration in extension.json..."
          if grep -q "kannada_custom" app/src/main/assets/ime/theme/org.florisboard.themes/extension.json; then
            echo "✅ Kannada theme registered"
          else
            echo "❌ Kannada theme not registered"
            exit 1
          fi

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, instrumentation-tests, font-tests]
    if: always()

    steps:
      - name: Test results
        run: |
          echo "## Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          UNIT_RESULT="${{ needs.unit-tests.result }}"
          INSTRUMENTATION_RESULT="${{ needs.instrumentation-tests.result }}"
          FONT_RESULT="${{ needs.font-tests.result }}"

          echo "| Test Suite | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY

          if [ "$UNIT_RESULT" == "success" ]; then
            echo "| Unit Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Unit Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$INSTRUMENTATION_RESULT" == "success" ]; then
            echo "| Instrumentation Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Instrumentation Tests | ⚠️ $INSTRUMENTATION_RESULT |" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "$FONT_RESULT" == "success" ]; then
            echo "| Font Tests | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Font Tests | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$UNIT_RESULT" != "success" ] || [ "$FONT_RESULT" != "success" ]; then
            echo "❌ **Critical tests failed!**" >> $GITHUB_STEP_SUMMARY
            exit 1
          elif [ "$INSTRUMENTATION_RESULT" != "success" ]; then
            echo "⚠️ **Some instrumentation tests failed, but build can proceed.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ **All tests passed successfully!**" >> $GITHUB_STEP_SUMMARY
          fi
