name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build-release:
    name: Build Release APK
    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.version.outputs.version }}
      apk-path: ${{ steps.build.outputs.apk-path }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Extract version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            TAG="${{ github.event.inputs.tag }}"
          else
            TAG=${GITHUB_REF#refs/tags/}
          fi
          VERSION=${TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION"

      - name: Decode signing keystore
        env:
          ENCODED_KEYSTORE: ${{ secrets.RELEASE_KEYSTORE }}
        run: |
          if [ -z "$ENCODED_KEYSTORE" ]; then
            echo "ERROR: RELEASE_KEYSTORE secret not set!"
            echo "Please add your keystore as a GitHub secret."
            exit 1
          fi
          echo $ENCODED_KEYSTORE | base64 -d > keystore.jks
          echo "✅ Keystore decoded successfully"

      - name: Build signed release APK
        id: build
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=../keystore.jks \
            -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$KEY_PASSWORD \
            --stacktrace

          APK_PATH="app/build/outputs/apk/release/app-release.apk"
          if [ ! -f "$APK_PATH" ]; then
            echo "ERROR: Release APK not found at $APK_PATH"
            exit 1
          fi

          # Rename APK with version
          RENAMED_APK="app/build/outputs/apk/release/FlorisBoard-${{ steps.version.outputs.version }}.apk"
          cp "$APK_PATH" "$RENAMED_APK"

          # Calculate checksums
          sha256sum "$RENAMED_APK" | cut -d' ' -f1 > "$RENAMED_APK.sha256"
          md5sum "$RENAMED_APK" | cut -d' ' -f1 > "$RENAMED_APK.md5"

          APK_SIZE=$(du -h "$RENAMED_APK" | cut -f1)
          SHA256=$(cat "$RENAMED_APK.sha256")

          echo "apk-path=$RENAMED_APK" >> $GITHUB_OUTPUT
          echo "apk-size=$APK_SIZE" >> $GITHUB_OUTPUT
          echo "sha256=$SHA256" >> $GITHUB_OUTPUT

          echo "✅ Release APK built successfully"
          echo "Size: $APK_SIZE"
          echo "SHA256: $SHA256"

      - name: Verify APK signature
        run: |
          APK_PATH="${{ steps.build.outputs.apk-path }}"
          $ANDROID_HOME/build-tools/34.0.0/apksigner verify --verbose "$APK_PATH"
          echo "✅ APK signature verified"

      - name: Upload release APK
        uses: actions/upload-artifact@v4
        with:
          name: florisboard-release-${{ steps.version.outputs.version }}
          path: |
            ${{ steps.build.outputs.apk-path }}
            ${{ steps.build.outputs.apk-path }}.sha256
            ${{ steps.build.outputs.apk-path }}.md5
          retention-days: 90

      - name: Cleanup keystore
        if: always()
        run: rm -f keystore.jks

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-release

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: florisboard-release-${{ needs.build-release.outputs.version }}
          path: ./release-artifacts

      - name: Generate changelog
        id: changelog
        run: |
          # Get previous tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREV_TAG" ]; then
            echo "First release, generating full changelog"
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Generating changelog from $PREV_TAG to HEAD"
            COMMITS=$(git log $PREV_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi

          # Create changelog file
          cat > RELEASE_CHANGELOG.md << EOF
          ## What's Changed

          $COMMITS

          ## Installation

          Download \`FlorisBoard-${{ needs.build-release.outputs.version }}.apk\` and install on your Android device.

          ### Verification

          **SHA256**: \`$(cat release-artifacts/*.sha256)\`
          **MD5**: \`$(cat release-artifacts/*.md5)\`

          ## Kannada Fonts

          This release includes custom Kannada fonts with the "Kannada Custom (Noto Sans)" theme.

          ### New Features
          - 🎨 Custom Noto Sans Kannada fonts (Regular, Bold, Light, Medium)
          - 🌏 Enhanced Kannada script support
          - ⚙️ Configurable font weights and styles
          - 🎯 Optimized for readability and performance

          ## Requirements

          - Android 7.0 (API 24) or higher
          - ~50MB storage space

          ## Support

          For issues, feedback, or contributions:
          - GitHub Issues: https://github.com/florisboard/florisboard/issues
          - Matrix Chat: #florisboard:matrix.org
          EOF

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat RELEASE_CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: FlorisBoard ${{ needs.build-release.outputs.version }}
          body_path: RELEASE_CHANGELOG.md
          files: |
            release-artifacts/FlorisBoard-${{ needs.build-release.outputs.version }}.apk
            release-artifacts/FlorisBoard-${{ needs.build-release.outputs.version }}.apk.sha256
            release-artifacts/FlorisBoard-${{ needs.build-release.outputs.version }}.apk.md5
          draft: false
          prerelease: ${{ contains(needs.build-release.outputs.version, '-') }}
          generate_release_notes: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update release summary
        run: |
          echo "## 🎉 Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version**: ${{ needs.build-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**APK**: FlorisBoard-${{ needs.build-release.outputs.version }}.apk" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Download" >> $GITHUB_STEP_SUMMARY
          echo "https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag }}" >> $GITHUB_STEP_SUMMARY

  notify:
    name: Post-Release Notifications
    runs-on: ubuntu-latest
    needs: [build-release, create-release]
    if: success()

    steps:
      - name: Release notification
        run: |
          echo "✅ Release ${{ needs.build-release.outputs.version }} published successfully!"
          echo ""
          echo "📦 APK: FlorisBoard-${{ needs.build-release.outputs.version }}.apk"
          echo "🔗 Release: https://github.com/${{ github.repository }}/releases/latest"
          echo ""
          echo "Next steps:"
          echo "1. Test the release APK"
          echo "2. Announce on social media/forums"
          echo "3. Update F-Droid metadata (if applicable)"
          echo "4. Close milestone"
          echo "5. Create next milestone"
