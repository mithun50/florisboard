name: Build APK

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      variant:
        description: 'Build variant'
        required: true
        default: 'debug'
        type: choice
        options:
          - debug
          - release
          - beta

jobs:
  lint:
    name: Lint & Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Run Kotlin lint
        run: ./gradlew ktlintCheck
        continue-on-error: true

      - name: Run Android lint
        run: ./gradlew lintDebug

      - name: Upload lint reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-reports
          path: |
            app/build/reports/lint-results-*.html
            app/build/reports/ktlint/

  build:
    name: Build ${{ matrix.variant }} APK
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      matrix:
        variant: [debug, release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3
        with:
          gradle-home-cache-cleanup: true

      - name: Decode keystore (release only)
        if: matrix.variant == 'release'
        env:
          ENCODED_KEYSTORE: ${{ secrets.RELEASE_KEYSTORE }}
        run: |
          if [ -n "$ENCODED_KEYSTORE" ]; then
            echo $ENCODED_KEYSTORE | base64 -d > keystore.jks
          else
            echo "Warning: RELEASE_KEYSTORE secret not set, building unsigned"
          fi

      - name: Build debug APK
        if: matrix.variant == 'debug'
        run: ./gradlew assembleDebug --stacktrace

      - name: Build release APK (unsigned)
        if: matrix.variant == 'release' && secrets.RELEASE_KEYSTORE == ''
        run: ./gradlew assembleRelease --stacktrace

      - name: Build release APK (signed)
        if: matrix.variant == 'release' && secrets.RELEASE_KEYSTORE != ''
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
        run: |
          ./gradlew assembleRelease \
            -Pandroid.injected.signing.store.file=../keystore.jks \
            -Pandroid.injected.signing.store.password=$KEYSTORE_PASSWORD \
            -Pandroid.injected.signing.key.alias=$KEY_ALIAS \
            -Pandroid.injected.signing.key.password=$KEY_PASSWORD \
            --stacktrace

      - name: Get APK info
        id: apk-info
        run: |
          if [ "${{ matrix.variant }}" == "debug" ]; then
            APK_PATH="app/build/outputs/apk/debug/app-debug.apk"
          else
            APK_PATH="app/build/outputs/apk/release/app-release.apk"
          fi

          if [ -f "$APK_PATH" ]; then
            APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
            echo "path=$APK_PATH" >> $GITHUB_OUTPUT
            echo "size=$APK_SIZE" >> $GITHUB_OUTPUT
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload APK artifact
        if: steps.apk-info.outputs.exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: florisboard-${{ matrix.variant }}-${{ github.sha }}
          path: ${{ steps.apk-info.outputs.path }}
          retention-days: 30

      - name: Comment APK info on PR
        if: github.event_name == 'pull_request' && steps.apk-info.outputs.exists == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### 📦 ${{ matrix.variant }} APK Built Successfully

              **Size**: ${{ steps.apk-info.outputs.size }}
              **SHA**: \`${{ github.sha }}\`
              **Artifact**: \`florisboard-${{ matrix.variant }}-${{ github.sha }}\`

              Download from the Actions artifacts above.`
            })

      - name: Cleanup keystore
        if: always() && matrix.variant == 'release'
        run: rm -f keystore.jks

  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: build
    if: always()

    steps:
      - name: Build result
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.build.result }}" == "success" ]; then
            echo "✅ All builds completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some builds failed. Check logs above." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Debug APK: \`florisboard-debug-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- Release APK: \`florisboard-release-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
